/// Preparation de la Trame et traduction///

public class Trame : MonoBehaviour
{
    [HideInInspector]
    public byte CRC_MSB = 0x00;
    [HideInInspector]
    public byte CRC_LSB = 0x00;
    [HideInInspector]
    public byte ucCrcLow = 0xff;
    [HideInInspector]
    public byte ucCrcHigh = 0xff;

    private byte IDCarte = 0xA3;
    private byte StartOctet = 0x02;
    private byte EndOctet = 0x03;



   

    [HideInInspector]
    public byte[] auchCRCHi = {
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40 };

    [HideInInspector]
    public byte[] auchCRCLo = { 0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7, 0x05, 0xC5, 0xC4, 0x04,
0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09, 0x08, 0xC8,
0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 0x1D, 0x1C, 0xDC,
0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3, 0x11, 0xD1, 0xD0, 0x10,
0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32, 0x36, 0xF6, 0xF7, 0x37, 0xF5, 0x35, 0x34, 0xF4,
0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A, 0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38,
0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE, 0x2E, 0x2F, 0xEF, 0x2D, 0xED, 0xEC, 0x2C,
0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26, 0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0,
0xA0, 0x60, 0x61, 0xA1, 0x63, 0xA3, 0xA2, 0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4,
0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F, 0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68,
0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C,
0xB4, 0x74, 0x75, 0xB5, 0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0,
0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54,
0x9C, 0x5C, 0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98,
0x88, 0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80, 0x40 };

    public static string TraductionBtHx(string BtValues)
    {
        string Trad;

        Trad = "0x" + Convert.ToString(Convert.ToByte(BtValues, 2), 16);
        return Trad;
    }

    public static string TraductionHxtVal(string HxValue)
    {
        string Trad;
        Trad = Convert.ToInt16(Convert.ToByte(HxValue, 16)).ToString();
        return Trad;

    }
    public static string TraductionHxtB(string HxValue)
    {
        string Trad;
        Trad = Convert.ToString(Convert.ToByte(HxValue, 16), 2).PadLeft(8, '0');
        return Trad;
    }


    private void CRC_Calc(byte ucOctet)
    {
        byte ucIndex = new byte(); /* will index into CRC lookup table */


        ucIndex = Convert.ToByte(ucCrcHigh ^ ucOctet); /* calculate the CRC */
        ucCrcHigh = Convert.ToByte(ucCrcLow ^ auchCRCHi[ucIndex]);
        ucCrcLow = auchCRCLo[ucIndex];
    }


    private byte[] DimTram(byte[] param)
    {
        byte[] Dimension = { 0x00, 0x00 };

        Dimension.SetValue(BitConverter.GetBytes(param.Length)[0], 1);

        Dimension.SetValue(BitConverter.GetBytes(param.Length)[1],0);


        return Dimension;
    }



    public void crcInit()
    {
        ucCrcHigh = 0xff;
        ucCrcLow = 0xff;

    }


    public bool VerifCRC(byte[] TrameRecu) ==> fonction permettant la verification de la trame re√ßu
    {
        bool OKPass = false;
      
        var TrameRecuInList = new List<byte>();
       

        TrameRecuInList.AddRange(TrameRecu);

        byte ucCrcHighRecu = TrameRecuInList[TrameRecuInList.Count - 3];
        byte ucCrcLowRecu = TrameRecuInList[TrameRecuInList.Count - 2];


        crcInit();
        CRC_Calc(TrameRecuInList[2]);
        CRC_Calc(Convert.ToByte(TrameRecuInList[3] & 0xff));
        TrameRecuInList.RemoveRange(0, 4);
        TrameRecuInList.RemoveRange(TrameRecuInList.Count - 3, 3);
        foreach(byte bt in TrameRecuInList)
        {
            
            CRC_Calc(bt);
        }

        if(ucCrcHigh == ucCrcHighRecu && ucCrcLow == ucCrcLowRecu)
        {
            OKPass = true;
        }
        else
        {
            OKPass = false;
        }

        return OKPass;
    }

    public byte[] EnvoiTrame(byte CMD, byte[] Param)==>fonction permettant de former la trame (pour les valeur cf le document sur les trames)
    {
        
            
        var ParamPCMD = new List<byte>();
        ParamPCMD.Add(CMD);

        if (Param.Length != 0) 
        ParamPCMD.AddRange(Param);

        byte[] DIMENSION = DimTram(ParamPCMD.ToArray());
      
  
        crcInit();
        CRC_Calc(DIMENSION[0]);
        CRC_Calc(Convert.ToByte(DIMENSION[1] & 0xff));
        foreach (byte bt in ParamPCMD)
        {
           
            CRC_Calc(bt);
        }

        var TrameArray = new List<byte>();
        TrameArray.Add(IDCarte);
        TrameArray.Add(StartOctet);
        TrameArray.AddRange(DIMENSION);
        TrameArray.Add(CMD);

        if(Param.Length!=0)
        TrameArray.AddRange(Param);

        TrameArray.Add(ucCrcHigh);
        TrameArray.Add(ucCrcLow);
        TrameArray.Add(EndOctet);
        
        return (TrameArray.ToArray());
    }


}
